#kernel HorizontalBlur
#kernel VerticalBlur


layout(rgba16f, set = 0, binding = 0) uniform image2D colorImage;

layout(push_constant, std430) uniform Params {
	vec2 raster_size;
};

vec3 linearBlur(ivec2 uv, int kernelSize, ivec2 direction) {
    vec3 sum = vec3(0);

    for (int i = -kernelSize; i <= kernelSize; ++i) {
        sum += imageLoad(colorImage, uv + direction * i).rgb;
    }

    return sum / vec3(kernelSize * 2);
}

[numthreads(8, 8, 1)]
void HorizontalBlur() {
	ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = ivec2(raster_size);
	
	if (uv.x >= size.x || uv.y >= size.y) return;
	
    vec3 color = linearBlur(uv, 10, ivec2(1, 0));
	
	imageStore(colorImage, uv, vec4(color, 1.0));
}

[numthreads(8, 8, 1)]
void VerticalBlur() {
	ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = ivec2(raster_size);
	
	if (uv.x >= size.x || uv.y >= size.y) return;

    vec3 color = linearBlur(uv, 10, ivec2(0, 1));
	
	imageStore(colorImage, uv, vec4(color, 1.0));
}