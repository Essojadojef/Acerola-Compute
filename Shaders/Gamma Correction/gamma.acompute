#kernel Gamma


layout(rgba16f, set = 0, binding = 0) uniform image2D color_image;

layout(binding = 1) uniform UniformBufferObject {
	float _Gamma;
    float pad1;
    float pad2;
    float pad3;
};

layout(push_constant, std430) uniform Params {
	vec2 raster_size;
};

[numthreads(8, 8, 1)]
void Gamma() {
	ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = ivec2(raster_size);
	
	if (uv.x >= size.x || uv.y >= size.y) return;
	
    vec3 color = imageLoad(color_image, uv).rgb;
	
	imageStore(color_image, uv, vec4(pow(color, vec3(_Gamma)), 1.0));
}